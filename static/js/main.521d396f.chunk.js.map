{"version":3,"sources":["troll-face-2.png","components/MemeGenerator.jsx","App.js","reportWebVitals.js","index.js"],"names":["MemeGenerator","props","handleChange","bind","handleClick","state","topText","bottomText","randomImg","TrollFace","allMemeImgs","memeDetails","fetch","then","response","json","memes","data","setState","catch","err","console","log","event","target","name","value","this","preventDefault","randomNumber","Math","round","random","length","randMemeImg","url","className","type","placeholder","onChange","onClick","src","alt","id","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAAe,MAA0B,yC,OCwF1BA,E,kDApFX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBAEnB,EAAKE,MAAQ,CACTC,QAAS,GACTC,WAAY,GACZC,UAAWC,EACXC,YAAa,GACbC,YAAa,IAVF,E,qDAcnB,WAAqB,IAAD,OAChBC,MAAM,qCACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAS,IACHC,EAAUD,EAAKE,KAAfD,MACR,EAAKE,SAAS,CACVR,YAAaM,OAGpBG,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,gBAAiBF,Q,0BAGnD,SAAaG,GAAQ,IAAD,EACQA,EAAMC,OAAtBC,EADQ,EACRA,KAAMC,EADE,EACFA,MACdC,KAAKT,SAAL,eACKO,EAAOC,M,yBAIhB,SAAYH,GACRA,EAAMK,iBACN,IAAMC,EAAeC,KAAKC,MAAMD,KAAKE,SAAWL,KAAKtB,MAAMK,YAAYuB,QACjEC,EAAcP,KAAKtB,MAAMK,YAAYmB,GAAcM,IACzDR,KAAKT,SAAS,CACVV,UAAW0B,EACXvB,YAAagB,KAAKtB,MAAMK,YAAYmB,O,oBAI5C,WACI,OACI,sBAAKO,UAAU,mBAAf,UACI,qBAAKA,UAAU,iBAAf,SACI,kDAEJ,sBAAKA,UAAU,UAAf,UACI,uBAAMA,UAAU,YAAhB,UACI,uBACIC,KAAK,OACLZ,KAAK,UACLC,MAAOC,KAAKtB,MAAMC,QAClBgC,YAAY,4BACZC,SAAUZ,KAAKzB,eAGnB,uBACImC,KAAK,OACLZ,KAAK,aACLC,MAAOC,KAAKtB,MAAME,WAClB+B,YAAY,+BACZC,SAAUZ,KAAKzB,eAGnB,wBAAQsC,QAASb,KAAKvB,YAAtB,8BAEJ,sBAAKgC,UAAU,OAAf,UACI,qBAAKK,IAAKd,KAAKtB,MAAMG,UAAWkC,IAAI,KACpC,oBAAIN,UAAU,MAAd,SAAqBT,KAAKtB,MAAMC,UAChC,oBAAI8B,UAAU,SAAd,SAAwBT,KAAKtB,MAAME,mBAG3C,sBAAK6B,UAAU,iBAAf,UACI,4BAAIT,KAAKtB,MAAMM,YAAYgC,KAC3B,4BAAIhB,KAAKtB,MAAMM,YAAYc,iB,GA9EnBmB,aCSbC,MARf,WACE,OACE,qBAAKT,UAAU,MAAf,SACM,cAAC,EAAD,OCKKU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnC,MAAK,YAAkD,IAA/CoC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.521d396f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/troll-face-2.e90ad9a2.png\";","import React, { Component } from 'react'\nimport TrollFace from '../troll-face-2.png'\n\nclass MemeGenerator extends Component {\n    constructor(props) {\n        super(props)\n        this.handleChange = this.handleChange.bind(this)\n        this.handleClick = this.handleClick.bind(this)\n\n        this.state = {\n            topText: \"\",\n            bottomText: \"\",\n            randomImg: TrollFace,\n            allMemeImgs: [],\n            memeDetails: \"\"\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://api.imgflip.com/get_memes')\n            .then(response => response.json())\n            .then(json => {\n                const { memes } = json.data\n                this.setState({\n                    allMemeImgs: memes\n                })\n            })\n            .catch(err => console.log(\"Caught Error:\", err))\n    }\n\n    handleChange(event) {\n        const { name, value } = event.target\n        this.setState({\n            [name]: value\n        })\n    }\n\n    handleClick(event) {\n        event.preventDefault();\n        const randomNumber = Math.round(Math.random() * this.state.allMemeImgs.length);\n        const randMemeImg = this.state.allMemeImgs[randomNumber].url;\n        this.setState({\n            randomImg: randMemeImg,\n            memeDetails: this.state.allMemeImgs[randomNumber]\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"application-body\">\n                <div className=\"header-section\" >\n                    <h1>Meme Generator</h1>\n                </div >\n                <div className=\"wrapper\">\n                    <form className='meme-form'>\n                        <input\n                            type='text'\n                            name='topText'\n                            value={this.state.topText}\n                            placeholder='Enter text to show on top'\n                            onChange={this.handleChange}\n                        />\n\n                        <input\n                            type='text'\n                            name='bottomText'\n                            value={this.state.bottomText}\n                            placeholder='Enter text to show at bottom'\n                            onChange={this.handleChange}\n                        />\n\n                        <button onClick={this.handleClick}>Generate Meme</button>\n                    </form>\n                    <div className='meme'>\n                        <img src={this.state.randomImg} alt='' />\n                        <h2 className='top'>{this.state.topText}</h2>\n                        <h2 className='bottom'>{this.state.bottomText}</h2>\n                    </div>\n                </div>\n                <div className=\"footer-section\" >\n                    <p>{this.state.memeDetails.id}</p>\n                    <p>{this.state.memeDetails.name}</p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MemeGenerator","import React from 'react'\nimport './App.css';\nimport MemeGenerator from './components/MemeGenerator.jsx'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n          <MemeGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}